using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SpiderWebSlowZone : MonoBehaviour
{
    public float knockbackForce = 32f; // Î∞ÄÎ†§ÎÇòÎäî Ìûò
    public float upwardForce = 9f;     // ÏÇ¥Ïßù ÏúÑÎ°ú ÌäïÍ∏∞Îäî ÎäêÎÇå
    public float cooldownTime = 0.5f;

    public int maxHitCount = 3;

    private int currentHitCount = 0;
    private bool isCooldown = false;

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.collider.CompareTag("Player") && !isCooldown)
        {
            Rigidbody playerRb = collision.collider.GetComponent<Rigidbody>();
            if (playerRb != null)
            {
                // Debug.Log("üí• Í±∞ÎØ∏Ï§Ñ Ï∂©Îèå!");
                currentHitCount++;

                // 1. Î∞©Ìñ•ÏùÄ ÏàòÌèâ(xz ÌèâÎ©¥) Í∏∞Ï§ÄÏúºÎ°ú Í≥ÑÏÇ∞
                Vector3 horizontalDir = collision.collider.transform.position - transform.position;
                horizontalDir.y = 0f; // ÏúÑ Î∞©Ìñ• Ï†úÍ±∞
                horizontalDir.Normalize();

                // 2. ÏàòÌèâ + ÏúÑÎ°ú ÏÇ¥Ïßù Ìûò Î∂ÑÎ¶¨
                Vector3 knockback = horizontalDir * knockbackForce + Vector3.up * upwardForce;

                // Debug.Log("üì¶ ÏµúÏ¢Ö knockback force: " + knockback);
                playerRb.AddForce(knockback, ForceMode.Impulse);

                StartCoroutine(CooldownCoroutine());
                StartCoroutine(ShakeWeb());

                if (currentHitCount >= maxHitCount)
                {
                    Destroy(gameObject);
                }
            }
        }
    }

    private IEnumerator CooldownCoroutine()
    {
        isCooldown = true;
        yield return new WaitForSeconds(cooldownTime);
        isCooldown = false;
    }

    private IEnumerator ShakeWeb()
    {
        float duration = 0.6f;
        float frequency = 60f;
        float scaleXIntensity = 0.04f;
        float scaleYIntensity = 0.03f;
        float positionXIntensity = 0.03f;

        Vector3 originalScale = transform.localScale;
        Vector3 originalPos = transform.localPosition;

        float elapsed = 0f;
        while (elapsed < duration)
        {
            float pulse = Mathf.Sin(elapsed * frequency);

            // Scale: Ï¢åÏö∞ / ÏÉÅÌïòÎ°ú ÌäÄÎäî ÎäêÎÇå
            float scaleX = originalScale.x + pulse * scaleXIntensity;
            float scaleY = originalScale.y + pulse * scaleYIntensity;

            // Position: Ï¢åÏö∞ Îñ®Î¶º
            float posX = originalPos.x + pulse * positionXIntensity;

            transform.localScale = new Vector3(scaleX, scaleY, originalScale.z);
            transform.localPosition = new Vector3(posX, originalPos.y, originalPos.z);

            elapsed += Time.deltaTime;
            yield return null;
        }

        // ÏõêÎûòÎåÄÎ°ú Î≥µÍµ¨
        transform.localScale = originalScale;
        transform.localPosition = originalPos;
    }

}
